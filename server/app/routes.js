// Generated by CoffeeScript 1.3.3
var __slice = [].slice;

module.exports = function(app) {
  var REST_PREFIX, add_type, apns, apns_connection, arg_map, async, background, die_on_error, fail_on_error, feedback, game_type, get_json, io, log_error, play_type, redis, send_notification, send_user_notification, _ref, _ref1, _ref2;
  async = require('async');
  background = function(fn) {
    return process.nextTick(fn);
  };
  log_error = function(err) {
    return console.error(err);
  };
  apns = require('apn');
  apns_connection = new apns.Connection({
    gateway: 'gateway.sandbox.push.apple.com',
    errorCallback: function(err, notification) {
      console.error(err);
      return console.error(notification);
    }
  });
  feedback = new apns.Feedback({
    interval: 20,
    feedback: function() {
      var err;
      err = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
      return console.log.apply(console, err);
    }
  });
  apns_connection.on('socketError', function(err) {
    return console.error(err);
  });
  apns_connection.on('error', function(err) {
    return console.error(err);
  });
  send_notification = function(device, alert) {
    var note;
    device = new apns.Device(device.id);
    note = new apns.Notification();
    note.alert = alert;
    note.device = device;
    return apns_connection.sendNotification(note);
  };
  send_user_notification = function(user, alert) {
    var device, _i, _len, _ref, _results;
    _ref = user.devices;
    _results = [];
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      device = _ref[_i];
      _results.push(send_notification(device, alert));
    }
    return _results;
  };
  _ref = require('./persist'), redis = _ref.redis, get_json = _ref.get_json;
  _ref1 = require('./util'), die_on_error = _ref1.die_on_error, fail_on_error = _ref1.fail_on_error, arg_map = _ref1.arg_map;
  _ref2 = require('./rest'), add_type = _ref2.add_type, REST_PREFIX = _ref2.PREFIX;
  game_type = add_type(app, 'game', {
    after_get: function(game, callback) {
      return game_type.load_child_list(game, 'plays', play_type, callback);
    }
  });
  play_type = add_type(app, 'play', {
    after_add: function(play, callback) {
      io.sockets.emit('add-play', play);
      return redis.rpush("" + REST_PREFIX + ":games:" + play.game + ":plays", play.id, callback);
    },
    before_del: function(play, callback) {
      return redis.lrem("" + REST_PREFIX + ":games:" + play.game + ":plays", 1, play.id, callback);
    }
  });
  io = require('socket.io').listen(8338);
  return io.sockets.on('connection', function(socket) {
    return socket.on('message', function(data) {
      return console.log(data);
    });
  });
};
